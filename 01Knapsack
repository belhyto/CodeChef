def knapsack_01(values, weights, capacity):
    n = len(values)
    # Create a 2D list to store the maximum value for each subproblem
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for w in range(capacity + 1):
            # If the current item can fit in the knapsack
            if weights[i - 1] <= w:
                # Decide whether to include the current item or not
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
            else:
                # If the current item is too heavy, exclude it
                dp[i][w] = dp[i - 1][w]
    return dp[n][capacity]
# Example usage:
values = [1, 2,3, 4]
weights = [4, 2,1,5]
capacity= 5
result = knapsack_01(values, weights, capacity)
print("Maximum value:", result)
